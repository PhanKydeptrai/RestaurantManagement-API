using System.Net;
using System.Net.Mail;
using FluentEmail.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Quartz;
using RestaurantManagement.Application.Data;
using RestaurantManagement.Domain.Entities;
using RestaurantManagement.Domain.IRepos;

namespace RestaurantManagement.Infrastructure.BackgroundJob;

public class VoucherBackgroundJob : IJob
{
    private readonly IApplicationDbContext _context;
    private readonly IConfiguration _configuration;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IFluentEmail _fluentEmail;

    public VoucherBackgroundJob(
        IApplicationDbContext context,
        IUnitOfWork unitOfWork,
        IFluentEmail fluentEmail,
        IConfiguration configuration)
    {
        _context = context;
        _unitOfWork = unitOfWork;
        _fluentEmail = fluentEmail;
        _configuration = configuration;
    }

    public async Task Execute(IJobExecutionContext context)
    {
        //Ki·ªÉm tra to√†n b·ªô kh√°ch h√†ng. N·∫øu c√≥ voucher h·∫øt h·∫°n th√¨ x√≥a voucher ƒë√≥ v√† g·ª≠i mail th√¥ng b√°o

        //Ki·ªÉm tra voucher h·∫øt h·∫°n
        Voucher[]? expiredVouchers = await _context.Vouchers
            .Where(v => v.ExpiredDate < DateTime.Now)
            .ToArrayAsync();

        //C·∫≠p nh·∫≠t voucher h·∫øt h·∫°n
        foreach (var voucher in expiredVouchers)
        {
            voucher.Status = "InActive";

            CustomerVoucher[]? customerVouchers = await _context.CustomerVouchers
                .Include(a => a.Voucher)
                .Include(a => a.Customer)
                .ThenInclude(a => a.User)
                .Where(a => a.VoucherId == voucher.VoucherId)
                .ToArrayAsync();
            foreach (var customerVoucher in customerVouchers)
            {
                //G·ª≠i mail th√¥ng b√°o cho kh√°ch h√†ng
                bool emailSent = false;
                int retryCount = 0;
                int maxRetries = 5;

                do
                {
                    if (_configuration["Environment"] == "Development")
                    {
                        try
                        {
                            await _fluentEmail.To(customerVoucher.Customer.User.Email)
                                .Subject("Nh√† h√†ng Nhum nhum - Voucher h·∫øt h·∫°n üò¢")
                                .Body($"Nh√† h√†ng Nhum Nhum xin th√¥ng b√°o <br> Voucher {customerVoucher.Voucher.VoucherCode} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n.", isHtml: true)
                                .SendAsync();

                            emailSent = true;
                        }
                        catch
                        {
                            retryCount++;
                            // if (retryCount >= maxRetries)
                            // {
                            //     return Result.Failure(new[] { new Error("Email", "Failed to send email") });
                            // }
                        }
                    }
                    else
                    {
                        try
                        {
                            #region Send Email using Gmail SMTP
                            // Th√¥ng tin ƒëƒÉng nh·∫≠p v√† c√†i ƒë·∫∑t m√°y ch·ªß SMTP
                            string fromEmail = "nhumnhumrestaurant@gmail.com"; // ƒê·ªãa ch·ªâ Gmail c·ªßa b·∫°n
                            string toEmail = customerVoucher.Customer.User.Email;  // ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n
                            string password = "ekgh lntd brrv bdyj";   // M·∫≠t kh·∫©u ·ª©ng d·ª•ng (n·∫øu b·∫≠t 2FA) ho·∫∑c m·∫≠t kh·∫©u c·ªßa t√†i kho·∫£n Gmail

                            var smtpClient = new SmtpClient("smtp.gmail.com")
                            {
                                Port = 587, // C·ªïng s·ª≠ d·ª•ng cho TLS
                                Credentials = new NetworkCredential(fromEmail, password), // ƒêƒÉng nh·∫≠p v√†o Gmail
                                EnableSsl = true // K√≠ch ho·∫°t SSL/TLS
                            };

                            var mailMessage = new MailMessage
                            {
                                From = new MailAddress(fromEmail),
                                Subject = "Nh√† h√†ng Nhum nhum - Voucher h·∫øt h·∫°n üò¢",
                                Body = $"", // N·ªôi dung email
                                IsBodyHtml = true // N·∫øu mu·ªën g·ª≠i email ·ªü ƒë·ªãnh d·∫°ng HTML
                            };

                            mailMessage.To.Add(toEmail);

                            // G·ª≠i email
                            smtpClient.Send(mailMessage);
                            #endregion

                            emailSent = true;
                        }
                        catch
                        {
                            retryCount++;
                            // if (retryCount >= maxRetries)
                            // {
                            //     return Result.Failure(new[] { new Error("Email", "Failed to send email") });
                            // }
                        }
                    }

                }
                while (!emailSent && retryCount < maxRetries);
            }
        }

        //C·∫≠p nh·∫≠t thay ƒë·ªïi cho voucher        

        await _unitOfWork.SaveChangesAsync();

        Console.WriteLine("Voucher background job is running");
    }
}
